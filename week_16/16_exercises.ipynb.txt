{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural & Behavioral Modeling - Week 16 (Exercises)\n",
    "by Your Name (Your Email)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/nbuser/anaconda3_420/lib/python3.5/site-packages/matplotlib/font_manager.py:281: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n",
      "  'Matplotlib is building the font cache using fc-list. '\n"
     ]
    }
   ],
   "source": [
    "%config IPCompleter.greedy=True \n",
    "%matplotlib inline\n",
    "from matplotlib.pyplot import *\n",
    "from IPython.display import *\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 Integrate-and-Fire Neuron with A Refractory Period (5 points)\n",
    "\n",
    "Please modify the leaky integrate-and-fire model to produce the following dynamics showing <a href=\"https://en.wikipedia.org/wiki/Refractory_period_(physiology)\">refractory/inactivation periods</a> like the following:\n",
    "\n",
    "<img src=\"https://courses.cit.cornell.edu/ece5990/ECE5725_Fall2017_projects/aj373_ssd56_website/images/centerLED.png\" width=70%>\n",
    "\n",
    "Unlike the above figure, you need to produce \"spikes\" in your implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.0 The Leaky Integrate-and-Fire Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbbd9ce24e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "I=2;g=5;C=10;Vrst=0;Vthr=.3;Vspk=1;\n",
    "\n",
    "dt=.1; V=[Vrst];\n",
    "for t in np.arange(0,10,dt):\n",
    "    V1=V[-1] # the last element\n",
    "    s=V1>Vthr; # An implicit IF-THEN hack\n",
    "    V2=s*Vrst+(1-s)*(V1+dt/C*(-g*V1+I)) # Euler integration\n",
    "    V1=s*Vspk+(1-s)*V1 # Spiking now?\n",
    "    V[-1]=V1; V.append(V2)\n",
    "\n",
    "plot(V);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Your modified I-F model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Please write your codes here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 The Hodgkin–Huxley Model (5 points)\n",
    "Please read P.19, P.20, & P.21 of the article by <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1392413/pdf/jphysiol01442-0106.pdf\">Hodgkin & Huxley (1952)</a>\n",
    "to implement the very original Hodgkin–Huxley model using their equations and parameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.0 Modern implementation of the H-H model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbbd9c882e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Integration of Hodgkin--Huxley equations with Euler method\n",
    "g=np.array([36, 120, 0.3]) # Maximal conductances (in units of mS/cm^2); 1=K, 2=Na, 3=l\n",
    "E=np.array([-12, 115, 10.613]) # Resting potentials (in mV):\n",
    "# Some initializations: some variables\n",
    "gnmh=np.zeros(3); Alpha=np.zeros(3); Beta=np.zeros(3); x=np.zeros(3); \n",
    "x[2]=1; I_ext=0; V=[-10]; dt=0.01; \n",
    "\n",
    "tspan=np.arange(0,50,dt)\n",
    "for t in tspan:\n",
    "    \n",
    "    V1=V[-1] # the last element\n",
    "    if(t>=10 and t<=40):\n",
    "        I_ext=10  # turns external current on when t=[10,40]\n",
    "    else:  \n",
    "        I_ext=0   \n",
    "        \n",
    "  # alpha functions:\n",
    "    Alpha[0]=0.01*(10-V1)/(np.exp((10-V1)/10)-1)\n",
    "    Alpha[1]=0.1*(25-V1)/(np.exp((25-V1)/10)-1)\n",
    "    Alpha[2]=0.07*np.exp(-V1/20)\n",
    "    \n",
    "  # beta functions:\n",
    "    Beta[0]=0.125*np.exp(-V1/80)\n",
    "    Beta[1]=4*np.exp(-V1/18)\n",
    "    Beta[2]=1/(np.exp((30-V1)/10)+1)\n",
    "    \n",
    "  # tau_x and x_0 (x=0,1,2) are defined with alpha and beta\n",
    "    tau=1/(Alpha+Beta);\n",
    "    x_inf=Alpha*tau;\n",
    "    x=x+dt*(x_inf-x)/tau;\n",
    "    \n",
    "  # calculate actual conductances g with given n, m, h\n",
    "    gnmh[0]=g[0]*x[0]**4;\n",
    "    gnmh[1]=g[1]*x[1]**3*x[2];\n",
    "    gnmh[2]=g[2];\n",
    "    \n",
    "  # Ohm's law\n",
    "    I=gnmh*(V1-E);\n",
    "    V2=V1+dt*(I_ext-sum(I))\n",
    "    V.append(V2)\n",
    "    \n",
    "plot(tspan,V[:-1]); \n",
    "xlabel('Time'); ylabel('Voltage');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1 Your implementation of the original H-H model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Please write your codes here."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
